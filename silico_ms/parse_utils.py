import json
from typing import Dict

import pandas as pd
from matchms.importing import load_from_mgf
from matchms import Spectrum

def load_ms1_peak_table(
        filename: str,
        mode: str = "mzmine"
    ) -> pd.DataFrame:
    """Load MS1 peak table file.

    Parameters:
        filename:
            Filname of MS1 peak table.
        mode:
            Type of MS1 peak table file.

    Returns:
        df_ms1:
            `DataFrame` of MS1 table.
    """
    match mode:
        case "mzmine":
            df_ms1 = load_mzmine_peak_table(filename)
        case _:
            pass

    return df_ms1


def load_mzmine_peak_table(filename: str):
    """Load MS1 peak table file generated by mzmine.

    Parameters:
        filename:
            Filname of MS1 peak table.

    Returns:
        df_ms1:
            `DataFrame` of MS1 table.
    """
    df = pd.read_csv(filename)
    feature_cols = [
        'id', 'rt', 'mz',
        'spectral_db_matches:compound_name', 'spectral_db_matches:ion_adduct', 'spectral_db_matches:cosine_score',
        'spectral_db_matches:mol_formula', 'spectral_db_matches:smiles', #'spectral_db_matches:inchi'
    ]
    data_cols = df.columns[df.columns.str.match('datafile.*area')].to_list()
    df_data = df[data_cols].fillna(0)

    df_vars = df[feature_cols]
    df_vars = df_vars.sort_values(['rt', 'mz'], ascending=[True, True])
    df_vars.columns = df_vars.columns.str.replace(r'spectral_db_matches:', '')
    df_vars = df_vars.rename(columns={'ion_adduct': 'adduct'})
    df_vars = df_vars.fillna('')

    df_ms1 = pd.concat([df_vars, df_data],axis=1)
    return df_ms1


def load_spec_file(
        filename:str,
        metadata_harmonization: bool = True
    ) -> Dict[Spectrum]:
    """Load MS/MS spectra file.

    Parameters:
        filename:
            Filename of MS/MS spectra.
        metadata_harmonization:
            Set to False if metadata harmonization to default keys is not desired.
            The default is True.

    Returns:
        spectra
    """
    spectrum_list = list(load_from_mgf(filename, metadata_harmonization))
    spectra = {spectrum.metadata["feature_id"] : spectrum for spectrum in spectrum_list}

    return spectra


def load_structure_database(filename: str) -> pd.DataFrame:
    """Load structure database.

    Parameters:
        filename:
            Filename of structure database.

    Returns:
        df:
            `DataFrame` of structure database.
    """
    df = pd.read_csv(filename, sep='\t')
    df = df[['compound_name', 'adduct', 'chain_shorthand', 'db_shorthand']]

    return df


def load_ozonolysis_prodcut_database(filename: str) -> pd.DataFrame:
    """Load ozonolysis product database.

    Parameters:
        filename:
            Filename of ozonolysis product database.

    Returns:
        df:
            `DataFrame` of ozonolysis product database.
    """
    with open(filename, 'r') as f:
        delta_mass_list = json.load(f)
    df = pd.DataFrame().from_records(delta_mass_list)
    df = df[df['delta_mass'].apply(lambda x: x != [] if isinstance(x, list) else False)]

    return df


def load_reference_database(
        structure_file: str,
        ozid_file: str
    ) -> pd.DataFrame:
    """Load reference database.

    Parameters:
        structure_file:
            Filename of structure database.
        ozid_file:
            Filename of ozonolysis product database.

    Returns:
        df_reference:
            `DataFrame` of reference database.
    """
    df_structure = load_structure_database(structure_file)
    df_ozid = load_ozonolysis_prodcut_database(ozid_file)
    df_reference = pd.merge(df_structure, df_ozid, how="inner", on=["chain_shorthand"])

    return df_reference